package lobbies

import (
	"sync"
	"time"

	"github.com/erykksc/kwikquiz/internal/quiz"
)

// Lobby is a actively running game session
type Lobby struct {
	mu                       sync.Mutex
	CreatedAt                time.Time
	StartedAt                time.Time
	FinishedAt               time.Time
	Quiz                     quiz.Quiz
	Host                     *User
	Pin                      string
	TimePerQuestion          time.Duration // Time for players to answer a question
	TimeForReading           time.Duration // Time to read the question before answering is allowed
	Players                  map[ClientID]*User
	State                    LobbyState
	questionTimer            *cancellableTimer
	CurrentQuestionStartTime time.Time
	CurrentQuestionTimeout   time.Time
	ReadingTimeout           time.Time
	CurrentQuestionIdx       int
	CurrentQuestion          *quiz.Question
	PlayersAnswering         int     // Number of players who haven't submitted an answer
	Leaderboard              []*User // Players sorted by score
}

type lobbyOptions struct {
	TimePerQuestion time.Duration
	TimeForReading  time.Duration
	Pin             string
	Quiz            quiz.Quiz
}

func createLobby(options lobbyOptions) *Lobby {
	// Default time per question is 30 seconds
	var timePerQuestion time.Duration
	if options.TimePerQuestion != 0 {
		timePerQuestion = options.TimePerQuestion
	} else {
		timePerQuestion = 30 * time.Second
	}

	// Default time for reading is 5 seconds
	var timeForReading time.Duration
	if options.TimeForReading != 0 {
		timeForReading = options.TimeForReading
	} else {
		timeForReading = 5 * time.Second
	}

	return &Lobby{
		Pin:             options.Pin, // If it's empty, it will be generated by repository
		TimePerQuestion: timePerQuestion,
		TimeForReading:  timeForReading,
		CreatedAt:       time.Now(),
		Players:         make(map[ClientID]*User),
		State:           LsWaitingForPlayers,
		Quiz:            options.Quiz,
	}
}
